generator client {
  provider        = "prisma-client-py"
  interface       = "asyncio" // We need async for FastAPI
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Main model for an insurance claim
model Claim {
  id              String         @id @default(cuid())
  claimNumber     String         @unique
  policyNumber    String
  claimantName    String
  incidentDate    DateTime
  status          ClaimStatus    @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // AI-generated fields
  aiRecommendation Json?         // Store the LLM's JSON output
  aiReasoning      String?       // Store the LLM's text reasoning

  auditLogs       AuditLog[]     @relation("ClaimAuditLogs")
}

// Model to track all actions taken on a claim
model AuditLog {
  id              String         @id @default(cuid())
  timestamp       DateTime       @default(now())
  action          String         // e.g., "CREATED", "TRIAGED", "APPROVED"
  details         String         // e.g., "AI recommended payout of $2350.00"
  
  claim           Claim          @relation("ClaimAuditLogs", fields: [claimId], references: [id])
  claimId         String
}

// Enum for the possible statuses of a claim
enum ClaimStatus {
  PENDING      // Newly received
  IN_REVIEW    // AI is processing
  AWAITING_APPROVAL // AI has made a recommendation
  APPROVED     // Human approved
  REJECTED     // Human rejected
}